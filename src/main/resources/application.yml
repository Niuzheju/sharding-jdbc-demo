spring:
  shardingsphere:
    datasource:
      ds0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: '123456'
        type: com.zaxxer.hikari.HikariDataSource
        jdbc-url: jdbc:mysql://127.0.0.1:3306/ds0?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&allowMultiQueries=true&useSSL=false
        username: root
      ds1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: '123456'
        type: com.zaxxer.hikari.HikariDataSource
        jdbc-url: jdbc:mysql://192.168.10.168:3306/ds1?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&allowMultiQueries=true&useSSL=false
        username: root
      names: ds0,ds1
    sharding:
      default-data-source-name: ds0
      tables:
        t_user:
          actual-data-nodes: ds$->{0}.t_user$->{0..1}
          table-strategy:
            inline:
              algorithm-expression: t_user$->{id % 2}
              sharding-column: id
          database‐strategy:
            inline:
              algorithm-expression: ds$->{0}
              sharding-column: id
          key-generator:
            type: SNOWFLAKE
            column: id
        t_order:
          # 属性必需, 属性配置参考YamlShardingRuleConfiguration
          actual-data-nodes: ds$->{0}.t_order$->{0}
          database‐strategy:
            standard:
              # 自定义分库算法
              precise-algorithm-class-name: com.example.sharding.jdbc.bean.CustomDbPreciseShardingAlgorithm
              sharding-column: store_no
          table-strategy:
            standard:
              # 自定义分表算法
              precise-algorithm-class-name: com.example.sharding.jdbc.bean.CustomTablePreciseShardingAlgorithm
              sharding-column: store_no
    props:
      sql:
        show: true
mybatis:
  mapper-locations: classpath:mybatis/mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    auto-mapping-behavior: partial
    shrink-whitespaces-in-sql: true
logging:
  level:
    com.example.sharding.jdbc.mapper: debug
